*** Testing single-threading for contiguous-internally allocated memory: Combination Functions

Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.176387
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.158264
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.159316
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.311118
Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.18442
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.159187
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.161796
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.160468
matrix1 + matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 - matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 * matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 / matrix2 = 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 

matrix3 + matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 - matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 * matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 / matrix4 = 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 


*** Testing multi-threading for contiguous-internally allocated memory: Combination Functions

Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.259831
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.249866
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.248559
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.266007
Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.266923
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.238077
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.25308
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.257151
matrix1 + matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 - matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 * matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 / matrix2 = 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 

matrix3 + matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 - matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 * matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 / matrix4 = 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 


For contiguous-internally allocated memory: single-threading was 1.38651 times faster than multi-threading

*** Testing single-threading for distributed-internally allocated memory: Combination Functions

Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.235864
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.222138
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.216685
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.362043
Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.250475
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.212043
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.210011
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.213714
matrix1 + matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 - matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 * matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 / matrix2 = 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 

matrix3 + matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 - matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 * matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 / matrix4 = 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 


*** Testing multi-threading for distributed-internally allocated memory: Combination Functions

Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.322692
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.300616
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.30005
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.315834
Function 'CombineValues' (correspondingly across two arrays) using the 'Add' combiner took 0.323344
Function 'CombineValues' (correspondingly across two arrays) using the 'Subtract' combiner took 0.304272
Function 'CombineValues' (correspondingly across two arrays) using the 'Multiply' combiner took 0.291276
Function 'CombineValues' (correspondingly across two arrays) using the 'Divide' combiner took 0.291841
matrix1 + matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 - matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 * matrix2 = 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 

matrix1 / matrix2 = 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 
-nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) -nan(ind) 

matrix3 + matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 - matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 * matrix4 = 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 
(0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) (0,0) 

matrix3 / matrix4 = 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 
(-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) (-nan(ind),-nan(ind)) 


For distributed-internally allocated memory: single-threading was 1.27403 times faster than multi-threading

