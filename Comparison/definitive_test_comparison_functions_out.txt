*** Testing contiguous-internally allocated memory: Comparison Functions

Function 'CompareValues' (correspondingly across two arrays) using the 'Equal' comparator took 0.412024
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'NotEqual' comparator took 0.41233
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThan' comparator took 0.408638
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThanOrEqual' comparator took 0.409112
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThan' comparator took 0.409177
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThanOrEqual' comparator took 0.409702
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'And' comparator took 0.415116
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nand' comparator took 0.410357
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Or' comparator took 0.411693
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nor' comparator took 0.411924
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Xor' comparator took 0.414479
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'And' comparator took 0.377406
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nand' comparator took 0.37633
Result: 1
Function 'CompareValues' (sequentially within one array) using the 'Or' comparator took 0.374269
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nor' comparator took 0.381547
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Xor' comparator took 0.375157
Result: 0
matrix1 == matrix2 = 1
matrix1 != matrix2 = 0
matrix1 < matrix2 = 0
matrix1 <= matrix2 = 1
matrix1 > matrix2 = 0
matrix1 >= matrix2 = 1
matrix3 && matrix4 = 0
matrix3 || matrix4 = 0

*** Testing distributed-internally allocated memory: Comparison Functions

Function 'CompareValues' (correspondingly across two arrays) using the 'Equal' comparator took 0.419375
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'NotEqual' comparator took 0.419345
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThan' comparator took 0.418071
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThanOrEqual' comparator took 0.418481
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThan' comparator took 0.420403
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThanOrEqual' comparator took 0.418699
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'And' comparator took 0.409063
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nand' comparator took 0.408845
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Or' comparator took 0.419858
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nor' comparator took 0.419424
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Xor' comparator took 0.414694
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'And' comparator took 0.385483
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nand' comparator took 0.386159
Result: 1
Function 'CompareValues' (sequentially within one array) using the 'Or' comparator took 0.392659
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nor' comparator took 0.399485
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Xor' comparator took 0.394378
Result: 0
matrix1 == matrix2 = 1
matrix1 != matrix2 = 0
matrix1 < matrix2 = 0
matrix1 <= matrix2 = 1
matrix1 > matrix2 = 0
matrix1 >= matrix2 = 1
matrix3 && matrix4 = 0
matrix3 || matrix4 = 0

