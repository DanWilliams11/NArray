*** Testing contiguous-internally allocated memory: Comparison Functions

Function 'CompareValues' (correspondingly across two arrays) using the 'Equal' comparator took 0.100876
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'NotEqual' comparator took 0.100283
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThan' comparator took 0.102391
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThanOrEqual' comparator took 0.104787
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThan' comparator took 0.104955
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThanOrEqual' comparator took 0.104043
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'And' comparator took 0.0976392
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nand' comparator took 0.0983055
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Or' comparator took 0.101474
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nor' comparator took 0.101002
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Xor' comparator took 0.100355
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'And' comparator took 0.0817069
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nand' comparator took 0.0822269
Result: 1
Function 'CompareValues' (sequentially within one array) using the 'Or' comparator took 0.0830589
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nor' comparator took 0.0820415
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Xor' comparator took 0.0819384
Result: 0
matrix1 == matrix2 = 1
matrix1 != matrix2 = 0
matrix1 < matrix2 = 0
matrix1 <= matrix2 = 1
matrix1 > matrix2 = 0
matrix1 >= matrix2 = 1
matrix3 && matrix4 = 0
matrix3 || matrix4 = 0

*** Testing distributed-internally allocated memory: Comparison Functions

Function 'CompareValues' (correspondingly across two arrays) using the 'Equal' comparator took 0.102615
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'NotEqual' comparator took 0.102287
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThan' comparator took 0.104277
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'LessThanOrEqual' comparator took 0.101883
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThan' comparator took 0.101961
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'GreaterThanOrEqual' comparator took 0.103989
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'And' comparator took 0.0984868
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nand' comparator took 0.0987144
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Or' comparator took 0.103339
Result: 0
Function 'CompareValues' (correspondingly across two arrays) using the 'Nor' comparator took 0.103759
Result: 1
Function 'CompareValues' (correspondingly across two arrays) using the 'Xor' comparator took 0.10287
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'And' comparator took 0.0835461
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nand' comparator took 0.0841268
Result: 1
Function 'CompareValues' (sequentially within one array) using the 'Or' comparator took 0.0852746
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Nor' comparator took 0.0852649
Result: 0
Function 'CompareValues' (sequentially within one array) using the 'Xor' comparator took 0.084748
Result: 0
matrix1 == matrix2 = 1
matrix1 != matrix2 = 0
matrix1 < matrix2 = 0
matrix1 <= matrix2 = 1
matrix1 > matrix2 = 0
matrix1 >= matrix2 = 1
matrix3 && matrix4 = 0
matrix3 || matrix4 = 0

